// --------------
// GENERATOR & DATASOURCE
// --------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------
// USER MODEL
// --------------
// Supports role: 'customer' | 'vendor'
// You store the role in Clerk publicMetadata, but it's useful to show relation here.
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // <-- Make sure this is present!
  email     String   @unique
  name      String?
  image     String?
  username  String?
  createdAt DateTime @default(now())

  // ðŸ‘‡ NEW: Store owner products
  products Product[]

  orders   Order[]
  cart     Cart?
  wishlist Wishlist?
}

// --------------
// PRODUCT MODEL
// --------------
model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Int
  stock       Int
  oldPrice    Int     @default(0)
  discount    Int     @default(0)
  rating      Float   @default(0)
  reviews     Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ‘‡ NEW: Vendor owner
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]

  tags   ProductTag[]
  images ProductImage[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

// --------------
// TAG & JOIN TABLE
// --------------
model Tag {
  id   String @id @default(cuid())
  name String @unique

  products ProductTag[]
}

model ProductTag {
  product   Product @relation(fields: [productId], references: [id])
  productId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  @@id([productId, tagId])
}

// --------------
// CART & CART ITEM
// --------------
model Cart {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id     String @id @default(cuid())
  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  quantity  Int
  createdAt DateTime @default(now())
}

// --------------
// ORDER & ORDER ITEM
// --------------
model Order {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  totalAmount Int
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  stripePaymentIntentId String?
  stripeSessionId       String?

  orderItems OrderItem[]
}

model OrderItem {
  id      String @id @default(cuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  quantity Int
  price    Int
}

// --------------
// ORDER STATUS ENUM
// --------------
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Wishlist {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @unique
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  createdAt  DateTime @default(now())
}
